================================================================================
API GATEWAY SERVICE - CENTRAL ROUTING & REQUEST MANAGEMENT
================================================================================

SERVICE OVERVIEW:
-----------------
The API Gateway serves as the single entry point for all client requests to the
GnyanSetu platform. It handles routing, request validation, and communication
with backend microservices.

PORT: 8000
PROTOCOL: HTTP/HTTPS
FRAMEWORK: FastAPI (Python)
STARTUP ORDER: 1st service (starts first)

TECHNOLOGY STACK:
-----------------
1. FastAPI 0.104.1
   - Modern, fast web framework for building APIs
   - Automatic API documentation (Swagger/OpenAPI)
   - Async/await support for high performance
   - Automatic request validation using Pydantic

2. Uvicorn (ASGI Server)
   - Lightning-fast ASGI server
   - Handles async requests efficiently
   - Hot-reload during development

3. Python 3.10+
   - Type hints for better code quality
   - Async/await for concurrent operations

4. Pydantic
   - Data validation using Python type annotations
   - Automatic JSON schema generation
   - Request/response models

WHY FASTAPI?
------------
- Migrated from Flask for better performance
- Native async support (handles multiple requests concurrently)
- Automatic API documentation at /docs
- Better type safety and validation
- Modern Python features (async/await)
- Faster than Flask for high-concurrency scenarios

HOW IT WORKS:
-------------
1. CLIENT REQUEST FLOW:
   Client (Browser) → API Gateway (Port 8000) → Backend Service
   
2. ROUTING:
   - /api/auth/* → User Service (Port 8002)
   - /api/lessons/* → Lesson Service (Port 8003)
   - /api/teaching/* → Teaching Service (Port 8004)
   - /api/quiz/* → Quiz & Notes Service (Port 8005)
   - /api/notes/* → Quiz & Notes Service (Port 8005)

3. REQUEST PROCESSING:
   a. Receives HTTP request from client
   b. Validates request format and headers
   c. Extracts JWT token (if present)
   d. Routes to appropriate backend service
   e. Forwards response back to client

4. ERROR HANDLING:
   - Catches backend service errors
   - Returns standardized error responses
   - Logs errors for debugging

KEY FEATURES:
-------------
✓ Single entry point for all API requests
✓ Automatic API documentation (/docs endpoint)
✓ Request/response validation
✓ JWT token forwarding to backend services
✓ CORS handling for frontend integration
✓ Health check endpoint (/health)
✓ Centralized error handling
✓ Load balancing (future enhancement)

API ENDPOINTS:
--------------
GET  /health                  - Health check
GET  /docs                    - Interactive API documentation
GET  /redoc                   - Alternative API documentation

# User Authentication Routes
POST /api/auth/register       → User Service
POST /api/auth/login          → User Service
POST /api/auth/google-login   → User Service
POST /api/auth/logout         → User Service
GET  /api/auth/profile        → User Service

# Lesson Management Routes
POST /api/lessons/upload      → Lesson Service
GET  /api/lessons/history     → Lesson Service
GET  /api/lessons/{id}        → Lesson Service
DELETE /api/lessons/{id}      → Lesson Service

# Teaching Session Routes
POST /api/teaching/start      → Teaching Service
GET  /api/teaching/conversations → Teaching Service
WebSocket /ws/teaching/       → Teaching Service

# Quiz & Notes Routes
GET  /api/quiz/{lesson_id}    → Quiz & Notes Service
POST /api/quiz/submit         → Quiz & Notes Service
GET  /api/notes/{lesson_id}   → Quiz & Notes Service
POST /api/notes/download      → Quiz & Notes Service

DEPENDENCIES:
-------------
- User Service (Port 8002): Authentication & user management
- Lesson Service (Port 8003): AI lesson generation
- Teaching Service (Port 8004): Real-time teaching sessions
- Quiz & Notes Service (Port 8005): Quiz & notes generation

CONFIGURATION:
--------------
Environment Variables:
- USER_SERVICE_URL: http://localhost:8002
- LESSON_SERVICE_URL: http://localhost:8003
- TEACHING_SERVICE_URL: http://localhost:8004
- QUIZ_NOTES_SERVICE_URL: http://localhost:8005
- ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001

Files:
- app_fastapi.py: Main FastAPI application
- requirements.txt: Python dependencies

STARTUP COMMAND:
----------------
python -m uvicorn app_fastapi:app --host 0.0.0.0 --port 8000 --reload

MONITORING:
-----------
- Health Check: http://localhost:8000/health
- API Docs: http://localhost:8000/docs
- Logs: Console output (uvicorn logger)

PERFORMANCE:
------------
- Average Response Time: <50ms (routing only)
- Concurrent Requests: 1000+ (async handling)
- Memory Usage: ~50-100MB

SECURITY:
---------
✓ CORS protection
✓ JWT token validation (forwards to services)
✓ Request size limits
✓ Rate limiting (future enhancement)

FUTURE ENHANCEMENTS:
--------------------
- Redis caching for frequent requests
- Rate limiting per user/IP
- Request/response logging to database
- API versioning (v1, v2)
- Load balancing to multiple service instances
- WebSocket connection pooling

TROUBLESHOOTING:
----------------
Issue: Service not responding
Fix: Check if backend services are running on correct ports

Issue: CORS errors in browser
Fix: Verify ALLOWED_ORIGINS includes frontend URLs

Issue: 502 Bad Gateway
Fix: Backend service is down, check service logs

RELATED SERVICES:
-----------------
Before: None (first service to start)
After: User Service (Port 8002)

================================================================================
Last Updated: October 10, 2025
Service Version: 2.0 (FastAPI Migration)
================================================================================
