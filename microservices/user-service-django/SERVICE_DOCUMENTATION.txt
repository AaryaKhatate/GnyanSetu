================================================================================
USER SERVICE - AUTHENTICATION & USER MANAGEMENT
================================================================================

SERVICE OVERVIEW:
-----------------
The User Service handles all user authentication, registration, profile management,
and session tracking for the GnyanSetu platform. It uses JWT tokens for secure
authentication and MongoDB for session storage.

PORT: 8002
PROTOCOL: HTTP
FRAMEWORK: Django 4.2.16 (Python)
STARTUP ORDER: 2nd service (after API Gateway)

TECHNOLOGY STACK:
-----------------
1. Django 4.2.16
   - Robust web framework with built-in ORM
   - Excellent security features
   - Admin interface for user management
   - Mature ecosystem with many packages

2. Django REST Framework (DRF)
   - Powerful toolkit for building REST APIs
   - Serialization and validation
   - Authentication and permissions
   - Browsable API interface

3. PyJWT
   - JSON Web Token implementation
   - Token generation and validation
   - Secure user authentication

4. MongoDB (via PyMongo)
   - NoSQL database for session storage
   - Fast read/write operations
   - Flexible schema for user sessions
   - Database: gnyansetu_users_django

5. SQLite (Development)
   - User data storage (users, profiles)
   - Simple setup for development
   - Can be migrated to PostgreSQL for production

6. Google OAuth 2.0
   - Third-party authentication
   - Sign in with Google
   - Secure token validation

WHY DJANGO?
-----------
- Battle-tested framework with excellent security
- Built-in user authentication system
- ORM for database operations
- Admin interface for managing users
- Large ecosystem of packages
- CSRF protection and security middleware

WHY MONGODB FOR SESSIONS?
--------------------------
- Fixed "UNIQUE constraint failed" SQLite error
- Fast session lookups by token
- TTL (Time To Live) support for auto-expiring sessions
- Handles high concurrent session operations
- Better scalability than SQLite for sessions

HOW IT WORKS:
-------------
1. USER REGISTRATION:
   a. Client sends registration data (email, username, password)
   b. Service validates data (unique email/username)
   c. Password hashed using Django's make_password()
   d. User saved to SQLite database
   e. UserProfile created automatically
   f. JWT token generated and returned

2. USER LOGIN:
   a. Client sends credentials (email/username + password)
   b. Service validates credentials against database
   c. JWT token generated with user_id and email
   d. Session saved to MongoDB with token and user details
   e. Token returned to client (expires in 7 days)

3. GOOGLE OAUTH LOGIN:
   a. Client sends Google access token
   b. Service validates token with Google API
   c. Retrieves user info (email, name, picture)
   d. Creates user if doesn't exist, or retrieves existing
   e. JWT token generated and session saved
   f. Token returned to client

4. TOKEN VALIDATION:
   a. Client sends JWT token in Authorization header
   b. Service decodes and validates token
   c. Checks token expiration
   d. Retrieves user from database
   e. Returns user data if valid

5. SESSION MANAGEMENT:
   - Sessions stored in MongoDB (gnyansetu_users_django.user_sessions)
   - Each session has: token, user_id, email, created_at, expires_at
   - Sessions expire after 7 days
   - Logout invalidates session in MongoDB

KEY FEATURES:
-------------
✓ User registration with email/username
✓ Secure password hashing (Django default)
✓ JWT token-based authentication
✓ Google OAuth 2.0 integration
✓ Session management in MongoDB
✓ User profile management
✓ Token refresh mechanism
✓ Email validation
✓ Password strength validation
✓ CSRF protection
✓ Admin interface for user management

API ENDPOINTS:
--------------
POST /api/v1/auth/register/
    Request: {username, email, password, first_name, last_name}
    Response: {token, user_id, email, username, message}

POST /api/v1/auth/login/
    Request: {email/username, password}
    Response: {token, user_id, email, username, message}

POST /api/v1/auth/google-login/
    Request: {token: google_access_token}
    Response: {token, user_id, email, username, message}

POST /api/v1/auth/logout/
    Headers: Authorization: Bearer <token>
    Response: {message}

GET /api/v1/auth/profile/
    Headers: Authorization: Bearer <token>
    Response: {user_id, email, username, first_name, last_name, profile}

GET /api/v1/health/
    Response: {status, service, timestamp}

DATABASE SCHEMA:
----------------
SQLite (User Data):
- auth_user: id, username, email, password, first_name, last_name, date_joined
- auth_userprofile: id, user_id, created_at, updated_at

MongoDB (Sessions):
Collection: user_sessions
Document: {
    _id: ObjectId,
    session_token: string (JWT),
    user_id: string (UUID),
    email: string,
    username: string,
    created_at: datetime,
    expires_at: datetime,
    is_active: boolean
}

AUTHENTICATION FLOW:
--------------------
Landing Page (Port 3000):
1. User registers/logs in
2. Receives JWT token
3. Token stored in URL hash
4. Redirects to Dashboard (Port 3001)

Dashboard (Port 3001):
1. Extracts token from URL hash
2. Stores in localStorage
3. Includes token in all API requests
4. Header: Authorization: Bearer <token>

CONFIGURATION:
--------------
Environment Variables (.env):
- SECRET_KEY: Django secret key
- GOOGLE_CLIENT_ID: Google OAuth client ID
- GOOGLE_CLIENT_SECRET: Google OAuth secret
- MONGODB_URI: mongodb://localhost:27017/
- JWT_EXPIRATION_DAYS: 7

Settings (settings.py):
- DATABASES: SQLite for user data
- MONGO_URI: MongoDB connection
- ALLOWED_HOSTS: ['*']
- CORS_ALLOWED_ORIGINS: [http://localhost:3000, http://localhost:3001]

DEPENDENCIES:
-------------
Python Packages:
- Django==4.2.16
- djangorestframework==3.14.0
- PyJWT==2.8.0
- pymongo==4.5.0
- google-auth==2.23.0
- python-dotenv==1.0.0
- django-cors-headers==4.3.0

External Services:
- MongoDB (localhost:27017)
- Google OAuth API

STARTUP COMMAND:
----------------
python manage.py runserver 0.0.0.0:8002

Or via batch file:
start_django_service.bat

MONITORING:
-----------
- Health Check: http://localhost:8002/api/v1/health/
- Admin Panel: http://localhost:8002/admin/
- API Browsable: http://localhost:8002/api/v1/auth/
- Logs: Console output (Django logger)

PERFORMANCE:
------------
- Average Response Time: 50-100ms
- JWT Generation: ~10ms
- MongoDB Session Lookup: ~5ms
- Database Queries: Optimized with select_related()

SECURITY FEATURES:
------------------
✓ Password hashing (PBKDF2 with SHA256)
✓ JWT tokens (signed with SECRET_KEY)
✓ CSRF protection
✓ SQL injection prevention (Django ORM)
✓ XSS protection
✓ Secure session storage in MongoDB
✓ Token expiration (7 days)
✓ Google OAuth token validation
✓ CORS protection
✓ HTTPS support (production)

FIXED ISSUES:
-------------
✓ UNIQUE constraint failed: user_sessions.session_token
  → Migrated sessions from SQLite to MongoDB

✓ Cross-port authentication (3000 → 3001)
  → Implemented URL hash parameter passing

✓ Google OAuth 400 Bad Request
  → Fixed parameter name (access_token → token)

✓ Unicode encoding errors (emoji in logs)
  → Removed emoji characters from logging

✓ UserProfile field errors
  → Fixed invalid avatar/bio fields

FUTURE ENHANCEMENTS:
--------------------
- PostgreSQL for production user data
- Redis for session caching
- Email verification for registration
- Password reset functionality
- Two-factor authentication (2FA)
- Social login (Facebook, GitHub)
- User roles and permissions
- Account deactivation/deletion
- Login history tracking
- Session management UI

TROUBLESHOOTING:
----------------
Issue: MongoDB connection failed
Fix: Start MongoDB service (mongod)

Issue: JWT token invalid
Fix: Check SECRET_KEY consistency, token expiration

Issue: Google OAuth not working
Fix: Verify GOOGLE_CLIENT_ID in .env file

Issue: CORS errors
Fix: Add frontend URL to CORS_ALLOWED_ORIGINS

RELATED SERVICES:
-----------------
Before: API Gateway (Port 8000)
After: Lesson Service (Port 8003)
Used By: All services (authentication required)

================================================================================
Last Updated: October 10, 2025
Service Version: 2.1 (MongoDB Session Migration)
================================================================================
